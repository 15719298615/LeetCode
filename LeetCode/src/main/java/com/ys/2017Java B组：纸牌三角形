/**
 * 题目描述
标题：纸牌三角形
A,2,3,4,5,6,7,8,9 共9张纸牌排成一个正三角形（A按1计算）。要求每个边的和相等。
下图就是一种排法（如有对齐问题，参看p1.png）。
      A
     9 6
    4   8
   3 7 5 2
这样的排法可能会有很多。
如果考虑旋转、镜像后相同的算同一种，一共有多少种不同的排法呢？
请你计算并提交该数字。
注意：需要提交的是一个整数，不要提交任何多余内容。
答案：144
 * @author 10249
 *
 */
递归

package b2017;
//这种接法其实也就是递归，想明白了和循环差不多
//
public class _02纸牌三角屋 {
 
    static int[] a = {1,2,3,4,5,6,7,8,9};
    static int ans;

    static void f(int k){
        if (k==9){
            int x1 = a[0]+a[1]+a[3]+a[5];//这里是将纸牌三角屋的每个边进行编号相加
            int x2 = a[0]+a[2]+a[4]+a[8];
            int x3 = a[5]+a[6]+a[7]+a[8];
            if (x1==x2&&x1==x3){//如果三个边都相等的话，ans++；
                ans++;
            }
        }
        //这里其实就是一直循环，在i未1的情况下一直进入f函数中进行位置的调换，循环9次。
        for (int i=k;i<9;i++){
            int t = a[k];
            a[k] = a[i];
            a[i] = t;
            f(k+1);//这里是将替换过后的值代入，进行判断。然后替换后的数组进入到f方法中，如果k这个下标值到了数组的末尾，则代表此次的替换值结束，我们检查一下他的三列是否相等，然后退出该方法
            t = a[k];//这是恢复现场，不要影响下一轮的替换。
            a[k] = a[i];
            a[i] = t;

        }
    }


    public static void main(String[] args) {
        f(0);
        System.out.println(ans/6);//同时因为题目要求了，考虑旋转、镜像后相同的算同一种，所以循环3种，镜像两种，2*3，为6.
    }


}


暴力：
package b2017;

public class tt {

    public static void main(String[] args) {
        int count = 0;
        for (int i = 1; i < 10; i++) {
            for (int j = 1; j < 10; j++) {
                for (int k = 1; k < 10; k++) {
                    for (int l = 1; l < 10; l++) {
                        for (int m = 1; m < 10; m++) {
                            for (int n = 1; n < 10; n++) {
                                for (int o = 1; o < 10; o++) {
                                    for (int p = 1; p < 10; p++) {
                                        for (int q = 1; q < 10; q++) {
                                            if ((i + j + k + l) == (l + m + n + o) && (i + j + k + l) == (o + q + p + i)
                                                    //之所以要有这里的原因是要去掉全为一样的数字那种情况！
                                                    && i != j && i != k && i != l && i != m && i != n && i != o
                                                    && i != p && i != q && j != k && j != l && j != m && j != n
                                                    && j != o && j != p && j != q && k != l && k != m && k != n
                                                    && k != o && k != p && k != q && l != m && l != n && l != o
                                                    && l != p && l != q && m != n && m != o && m != p && m != q
                                                    && n != o && n != p && n != q && o != p && o != q && p != q) {
                                                count++;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        System.out.println(count / 6);// 旋转,镜像算一种

    }


}
